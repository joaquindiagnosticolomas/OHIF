"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@cornerstonejs/core");
const base_1 = require("./base");
const scroll_1 = require("../utilities/scroll");
class StackScrollMouseWheelTool extends base_1.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            invert: false,
            debounceIfNotLoaded: true,
            loop: false,
        },
    }) {
        super(toolProps, defaultToolProps);
    }
    mouseWheelCallback(evt) {
        const { wheel, element } = evt.detail;
        const { direction } = wheel;
        const { invert } = this.configuration;
        const { viewport } = (0, core_1.getEnabledElement)(element);
        const delta = direction * (invert ? -1 : 1);
        if (viewport instanceof core_1.StackViewport) {
            viewport.scroll(delta, this.configuration.debounceIfNotLoaded, this.configuration.loop);
        }
        else if (viewport instanceof core_1.VolumeViewport) {
            const targetId = this.getTargetId(viewport);
            const volumeId = targetId.split('volumeId:')[1];
            (0, scroll_1.scrollVolume)(viewport, volumeId, delta);
        }
        else {
            throw new Error('StackScrollMouseWheelTool: Unsupported viewport type');
        }
    }
}
StackScrollMouseWheelTool.toolName = 'StackScrollMouseWheel';
exports.default = StackScrollMouseWheelTool;
//# sourceMappingURL=StackScrollToolMouseWheelTool.js.map